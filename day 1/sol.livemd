# AoC 2023 - 1

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## Problem 1

```elixir
file_input = Kino.Input.file("")
```

```elixir
value = Kino.Input.read(file_input)
path = Kino.Input.file_path(value.file_ref)
input = File.read!(path) |> String.split("\n")
```

```elixir
defmodule Day1 do
  require Logger

  def run(input) do
    input
    # comment this to get result for part 1.
    |> Enum.map(&written_number_to_number_string/1)
    |> Enum.map(&leave_only_numbers/1)
    |> Enum.map(&format_numbers/1)
    |> Enum.sum()
  end

  defp written_number_to_number_string(string) do
    string
    |> String.replace("one", "o1e")
    |> String.replace("two", "t2o")
    |> String.replace("three", "t3e")
    |> String.replace("four", "f4r")
    |> String.replace("five", "f5e")
    |> String.replace("six", "s6x")
    |> String.replace("seven", "s7n")
    |> String.replace("eight", "e8t")
    |> String.replace("nine", "n9e")
  end

  defp leave_only_numbers(string) do
    String.replace(string, ~r/[^0-9]/, "")
  end

  defp format_numbers(""), do: 0

  defp format_numbers(string) do
    (String.at(string, 0) <> String.at(string, String.length(string) - 1))
    |> Integer.parse()
    |> elem(0)
  end
end
```

```elixir
Day1.run(input)
```
